AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CreateOrderImageTagParameter:
    Type: String
    Description: Tag version of the docker image.
  ApiGatewayStageName:
    Type: String
    Default: call
  ApiGatewayPutHTTPMethod:
    Type: String
    Default: PUT
  TableName:
    Type: String
    Default: order-table

Resources: 
  OrderTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "user_id"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Ref TableName

  createOrdersFunction:
    Type: AWS::Lambda::Function
    Properties:
      PackageType: "Image"
      Code:
        ImageUri:  !Ref CreateOrderImageTagParameter
      Description: Insert orders records in DynamoDB table.
      Role: !GetAtt [LambdaInsertOrdersExecutionRole,Arn]
      MemorySize: 128
      FunctionName: createOrders
      Environment:
        Variables:
          ORDER_TABLE: !Ref TableName
    DependsOn: OrderTable

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Order API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: orderApiGateway

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: PUT
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt [createOrdersFunction,Arn]
      ResourceId: !GetAtt [apiGateway,RootResourceId]
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref ApiGatewayStageName

  orderModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: Order
      RestApiId: !Ref apiGateway
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        type: object
        title: Order
        additionalProperties: false
        properties:
          user_id:
            type: string
          restaurant_id:
            type: string
          name:
            type: string
          order_status:
            type: string
          quantity:
            type: integer

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt [createOrdersFunction,Arn]
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      # arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${ApiGatewayStageName}/${ApiGatewayPutHTTPMethod}/

  LambdaInsertOrdersExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaCreateOrderPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt [OrderTable,Arn]
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${createOrdersFunction}
      RetentionInDays: 90

Outputs:
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref OrderTable

  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}

  lambdaArn:
    Value: !GetAtt [createOrdersFunction,Arn]